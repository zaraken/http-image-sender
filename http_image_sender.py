import io
import glob

from urllib import request as req

from PIL import Image as PIL_Image

img_count = 0

def next_image_local():
    imgs = list(glob.glob('./images/*.jpg'))
    while True:
        cycle_t = time.time()
        for img in imgs:
            print(img)
            yield img
        print('Cycle time', time.time() - cycle_t)

def next_image_web():
    yield req.urlopen('https://picsum.photos/240/135')

images = next_image_local()

def image_to_bytes(img_src, box=None, thumbnail_size=None, save=False):

    img = PIL_Image.open(img_src, mode='r')
    print(img.format)
    roi_img = img.crop(box) if box is not None else img
    if thumbnail_size is not None:
        roi_img = roi_img.thumbnail(thumbnail_size)

    byte_arr = io.BytesIO()
    roi_img.save(byte_arr, format='JPEG')

    if save:
        with open(f'./images/img_{time.time()}.jpg', 'wb') as fout:
            roi_img.save(fout, format=img.format)

    return byte_arr.getvalue()




import http.server
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs
import time

img_cache = dict()

class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        self.send_header("Content-type", "text/html")

        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()

        # Extract query param
        #name = 'World'
        #query_components = parse_qs(urlparse(self.path).query)
        #if 'name' in query_components:
        #    name = query_components["name"][0]

        # Some custom HTML code, possibly generated by another function
        # html = f"<html><head></head><body><h1>Hello {name}!</h1></body></html>"

        # Writing the HTML contents with UTF-8
        # self.wfile.write(bytes(html, "utf8"))

        count = 1
        while count > 0:
            count -= 1

            import jpeg_bytes
            #io_jpeg = io.BytesIO(bytearray(jpeg_bytes.img))
            #self.wfile.write(io_jpeg.getvalue())

            #print(len(jpeg_bytes.img))
            #self.wfile.write(bytearray(jpeg_bytes.img))

            img = next(images)
            print(img)
            global img_cache
            if img not in img_cache:
                img_bytes = image_to_bytes(img)
                img_cache[img] = img_bytes
            else:
                img_bytes = img_cache[img]

            self.wfile.write(img_bytes)
        return

# Create an object of the above class
handler_object = MyHttpRequestHandler

PORT = 8765
my_server = socketserver.TCPServer(("", PORT), handler_object)

try:
    # Star the server
    my_server.serve_forever()
except KeyboardInterrupt:
    my_server.shutdown()
    for i in range(5):
        print('Shutting down', i)
        time.sleep(1)
my_server.shutdown()
#img = req.urlopen('https://picsum.photos/240/135')
#print(len(image_to_bytes(img)))
